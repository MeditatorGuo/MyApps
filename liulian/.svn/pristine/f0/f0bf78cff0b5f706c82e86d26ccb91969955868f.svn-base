package com.haomee.adapter;

import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.easemob.EMCallBack;
import com.easemob.chat.EMChatManager;
import com.easemob.chat.EMConversation;
import com.easemob.chat.EMMessage;
import com.easemob.chat.TextMessageBody;
import com.haomee.chat.activity.ChatActivity;
import com.haomee.chat.adapter.MessageAdapter.ViewHolder;
import com.haomee.consts.CommonConst;
import com.haomee.consts.PathConst;
import com.haomee.entity.PunchClock_;
import com.haomee.entity.Users;
import com.haomee.liulian.LiuLianApplication;
import com.haomee.liulian.R;
import com.haomee.liulian.UserInfoDetail;
import com.haomee.util.imageloader.ImageLoaderCharles;
import com.haomee.view.MyToast;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;

public class PunchAdapter extends BaseAdapter {

	private List<PunchClock_> list_punch;
	private Context context;
	private LayoutInflater inflater;
	private ViewHolder viewHolder;
	private Timer timer;

	public PunchAdapter(Context context) {
		this.context = context;
		inflater = LayoutInflater.from(context);

	}

	public void setData(List<PunchClock_> list_punch) {
		this.list_punch = list_punch;
		notifyDataSetChanged();

		startRefresh();
	}

	public void startRefresh() {

		if (timer != null) {
			timer.cancel();
		}
		handler.removeMessages(0);
		timer = new Timer();
		timer.schedule(new TimerTask() {
			public void run() {
				handler.sendEmptyMessage(0);
			}
		}, 0, 1000);
	}

	public void stopRefresh() {
		if (timer != null) {
			timer.cancel();
		}
		handler.removeMessages(0);
	}

	@Override
	public int getCount() {

		return list_punch == null ? 0 : list_punch.size();
	}

	@Override
	public Object getItem(int position) {
		return list_punch.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(final int position, View convertView, ViewGroup parent) {
		// 只有当convertView不存在的时候才去inflate子元素
		if (convertView == null) {
			viewHolder = new ViewHolder();
			convertView = inflater.inflate(R.layout.item_punch, null);
			viewHolder.topic_pic = (ImageView) convertView.findViewById(R.id.item_image);
			viewHolder.topic_name = (TextView) convertView.findViewById(R.id.item_name);
			viewHolder.topic_desc = (TextView) convertView.findViewById(R.id.item_desc);
			viewHolder.item_time = (TextView) convertView.findViewById(R.id.item_time);
			viewHolder.item_hi = (ImageView) convertView.findViewById(R.id.item_hi);
			viewHolder.user_level_icon = (ImageView) convertView.findViewById(R.id.user_level);
			convertView.setTag(viewHolder);

			viewHolder.item_hi.setOnClickListener(btClickListener);

		} else {
			viewHolder = (ViewHolder) convertView.getTag();
		}

		PunchClock_ punch = list_punch.get(position);
		viewHolder.item_hi.setTag(punch);

		viewHolder.topic_pic.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent();
				intent.putExtra("uid", list_punch.get(position).getUser().getUid());
				intent.setClass(context, UserInfoDetail.class);
				context.startActivity(intent);
			}
		});
		if (list_punch.get(position).getUser().getUid().equals(LiuLianApplication.current_user.getUid())) {
			viewHolder.item_hi.setImageResource(R.drawable.hi_button_pressed);
			convertView.setBackgroundResource(R.drawable.bg_round_yellow);
		} else {
			viewHolder.item_hi.setImageResource(R.drawable.hi_button_default);
			convertView.setBackgroundResource(R.drawable.bg_round_white);
		}
		if (list_punch.get(position).isSay_hi()) {
			viewHolder.item_hi.setImageResource(R.drawable.hi_button_pressed);
		} else {
			viewHolder.item_hi.setImageResource(R.drawable.hi_button_default);
		}

		viewHolder.topic_pic.setImageResource(R.drawable.item_icon);
		ImageLoaderCharles.getInstance(context).addTask(list_punch.get(position).getUser().getImage(), viewHolder.topic_pic);
		ImageLoaderCharles.getInstance(context).addTask(list_punch.get(position).getUser().getUser_level_icon(), viewHolder.user_level_icon);
		viewHolder.topic_pic.setBackgroundResource(CommonConst.user_sex[list_punch.get(position).getUser().getSex()]);

		viewHolder.topic_name.setText(list_punch.get(position).getUser().getName());
		viewHolder.topic_desc.setText(list_punch.get(position).getText_content());
		viewHolder.item_time.setText(list_punch.get(position).getCreate_time());
		return convertView;
	}

	@SuppressLint("HandlerLeak")
	final Handler handler = new Handler() {
		public void handleMessage(Message msg) {

			boolean need_update = false;
			if (list_punch != null) {
				try {
					for (PunchClock_ clock : list_punch) {
						String create_time = clock.getCreate_time();
						if (create_time.contains("秒")) {
							int current_time = Integer.valueOf(create_time.split("秒")[0]);
							if (current_time++ >= 60) {
								create_time = "1分前";
							} else {
								create_time = current_time + "秒前";
							}

							need_update = true;
						}

						clock.setCreate_time(create_time);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			if (need_update) { // 有更新的才刷新
				notifyDataSetChanged();
			}

		}
	};

	private OnClickListener btClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.item_hi: {
				PunchClock_ punch = (PunchClock_) v.getTag();
				ImageView image = (ImageView) v;
				image.setImageResource(R.drawable.hi_button_pressed);
				punch.setSay_hi(true);
				// 打招呼
				if (!punch.getUser().getUid().equals(LiuLianApplication.current_user.getUid())) {
					say_hi(punch.getUser());
				} else {
					MyToast.makeText(context, "无法和自己打招呼哦！", Toast.LENGTH_SHORT).show();
				}
				break;
			}
			}
		}
	};

	public void say_hi(final Users user) {
		String url = PathConst.URL_SAY_HI + "&login_uid=" + LiuLianApplication.current_user.getUid() + "&Luid=" + LiuLianApplication.current_user.getUid() + "&to_hx_username=" + user.getHx_username();
		AsyncHttpClient asyncHttp = new AsyncHttpClient();
		asyncHttp.get(url, new AsyncHttpResponseHandler() {
			@Override
			public void onSuccess(String arg0) {
				super.onSuccess(arg0);
				try {
					JSONObject json_obj = new JSONObject(arg0);
					if (json_obj.getString("flag").equals("1")) {
						// //sayhi成功
						/*
						 * Intent intent = new Intent();
						 * intent.setClass(context, ChatActivity.class);
						 * intent.putExtra("uId", user.getUid());// 聊天对象的uid
						 * intent.putExtra("userId", user.getHx_username());//
						 * 聊天对象的环信ID intent.putExtra("nickname",
						 * user.getName());// 聊天对象的昵称
						 * intent.putExtra("is_from_hi", true);
						 * context.startActivity(intent);
						 */
						EMMessage message = EMMessage.createSendMessage(EMMessage.Type.TXT);
						EMConversation conversation = EMChatManager.getInstance().getConversation(user.getHx_username());
						TextMessageBody txtBody = new TextMessageBody("hi");
						// 设置消息body
						message.addBody(txtBody);
						// 设置要发给谁,用户username或者群聊groupid
						message.setReceipt(user.getHx_username());
						// 把messgage加到conversation中

						conversation.addMessage(message);
						sendMsgInBackground(message);
					} else {
						MyToast.makeText(context, "今天已经跟ta打过招呼了", Toast.LENGTH_SHORT).show();
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		});
	}

	public void sendMsgInBackground(final EMMessage message) {
		// 调用sdk发送异步发送方法
		EMChatManager.getInstance().sendMessage(message, new EMCallBack() {

			@Override
			public void onSuccess() {
				// MyToast.makeText(context, "打招呼成功", 1).show();
			}

			@Override
			public void onError(int code, String error) {
				// MyToast.makeText(context, "打招呼失败", 1).show();
			}

			@Override
			public void onProgress(int progress, String status) {
			}

		});

	}

	class ViewHolder {

		ImageView topic_pic;
		TextView topic_name;
		TextView topic_desc;
		TextView item_time;
		ImageView item_hi;
		ImageView user_level_icon;
	}

}
